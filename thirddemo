这个实验最重要的是要写找到要抠的像素值，在这个过程中如果没写对会合成出各种各样搞笑的图片，所以写对判断条件很重要。其他的部分都是在前面的实验中做过的，
没有太大的难度。


、、、
#include <iostream>
#include "stdafx.h"
//#include "pch.h"
using namespace std;
#include "./gdal/gdal_priv.h"
#pragma comment(lib,"gdal_i.lib")

int main()
{
	GDALDataset* poSrcDS1;
	GDALDataset* poSrcDS2;
	GDALDataset* poDstDS;
	int imgXlen, imgYlen;//图像的宽度和高度
	const char* srcPath1 = "superman.jpg";
	const char* srcPath2 = "space.jpg";
	const char* dstPath = "supermaninspace.tif";//输出图像

									   //图像内存存储
	GByte* buffTmpr1;
	GByte* buffTmpr2;
	GByte* buffTmpg1;
	GByte* buffTmpg2;
	GByte* buffTmpb1;
	GByte* buffTmpb2;
	int j, k, bandNum;//图像波段数

	GDALAllRegister();//注册驱动

	poSrcDS1 = (GDALDataset*)GDALOpenShared(srcPath1, GA_ReadOnly);//打开图像superman.jpg
	poSrcDS2 = (GDALDataset*)GDALOpenShared(srcPath2, GA_ReadOnly);//打开图像space.jpg

																   //获取图像宽度，高度，波段数
	imgXlen = poSrcDS1->GetRasterXSize();
	imgYlen = poSrcDS1->GetRasterYSize();
	bandNum = poSrcDS1->GetRasterCount();

	//根据图像的宽度和高度分配内存
	buffTmpr1 = (GByte*)CPLMalloc(imgXlen*imgYlen * sizeof(GByte));
	buffTmpr2 = (GByte*)CPLMalloc(imgXlen*imgYlen * sizeof(GByte));
	buffTmpg1 = (GByte*)CPLMalloc(imgXlen*imgYlen * sizeof(GByte));
	buffTmpg2 = (GByte*)CPLMalloc(imgXlen*imgYlen * sizeof(GByte));
	buffTmpb1 = (GByte*)CPLMalloc(imgXlen*imgYlen * sizeof(GByte));
	buffTmpb2 = (GByte*)CPLMalloc(imgXlen*imgYlen * sizeof(GByte));

	//创建输出图像
	poDstDS = GetGDALDriverManager()->GetDriverByName("GTiff")->Create(dstPath, imgXlen, imgYlen, bandNum, GDT_Byte, NULL);

	//读取红色通道
	poSrcDS2->GetRasterBand(1)->RasterIO(GF_Read, 0, 0, imgXlen, imgYlen, buffTmpr2, imgXlen, imgYlen, GDT_Byte, 0, 0);
	poSrcDS1->GetRasterBand(1)->RasterIO(GF_Read, 0, 0, imgXlen, imgYlen, buffTmpr1, imgXlen, imgYlen, GDT_Byte, 0, 0);
	//读取绿色通道
	poSrcDS2->GetRasterBand(2)->RasterIO(GF_Read, 0, 0, imgXlen, imgYlen, buffTmpg2, imgXlen, imgYlen, GDT_Byte, 0, 0);
	poSrcDS1->GetRasterBand(2)->RasterIO(GF_Read, 0, 0, imgXlen, imgYlen, buffTmpg1, imgXlen, imgYlen, GDT_Byte, 0, 0);
	//读取蓝色通道
	poSrcDS2->GetRasterBand(3)->RasterIO(GF_Read, 0, 0, imgXlen, imgYlen, buffTmpb2, imgXlen, imgYlen, GDT_Byte, 0, 0);
	poSrcDS1->GetRasterBand(3)->RasterIO(GF_Read, 0, 0, imgXlen, imgYlen, buffTmpb1, imgXlen, imgYlen, GDT_Byte, 0, 0);

	for (j = 0; j < imgYlen; j++)
	{
		for (k = 0; k < imgXlen; k++)
		{
			if (!((buffTmpr1[j*imgXlen + k] >(GByte)10) && (buffTmpr1[j*imgXlen + k] < (GByte)160)
				&& (buffTmpg1[j*imgXlen + k] > (GByte)100) && (buffTmpg1[j*imgXlen + k] < (GByte)220)
				&& (buffTmpb1[j*imgXlen + k] > (GByte)10) && (buffTmpb1[j*imgXlen + k] < (GByte)110)))
			{
				buffTmpr2[j*imgXlen + k] = buffTmpr1[j*imgXlen + k];
				buffTmpg2[j*imgXlen + k] = buffTmpg1[j*imgXlen + k];
				buffTmpb2[j*imgXlen + k] = buffTmpb1[j*imgXlen + k];
			}
		}
	}
	//数据写入poDstDS
	poDstDS->GetRasterBand(1)->RasterIO(GF_Write, 0, 0, imgXlen, imgYlen, buffTmpr2, imgXlen, imgYlen, GDT_Byte, 0, 0);
	poDstDS->GetRasterBand(2)->RasterIO(GF_Write, 0, 0, imgXlen, imgYlen, buffTmpg2, imgXlen, imgYlen, GDT_Byte, 0, 0);
	poDstDS->GetRasterBand(3)->RasterIO(GF_Write, 0, 0, imgXlen, imgYlen, buffTmpb2, imgXlen, imgYlen, GDT_Byte, 0, 0);

	printf("Superman in space！\n");
	//清除内存
	CPLFree(buffTmpr1);
	CPLFree(buffTmpr2);
	CPLFree(buffTmpg1);
	CPLFree(buffTmpg2);
	CPLFree(buffTmpb1);
	CPLFree(buffTmpb2);
	//关闭dataset
	GDALClose(poDstDS);
	GDALClose(poSrcDS1);
	GDALClose(poSrcDS2);
	system("PAUSE");
	return 0;
}
